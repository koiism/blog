---
import '@/styles/style.scss';
import '@/styles/globals.css';
import { ModeToggle } from '@/components/ModeToggle';
import { ViewTransitions } from 'astro:transitions';
import client from 'tina/__generated__/client';
import { groupBy } from '@/lib/utils';
interface Props {
  title?: string;
}

const { title = 'Koiism' } = Astro.props;

const pages = (await client.queries.pageConnection()).data.pageConnection.edges;
const navInfo = groupBy(pages, (page) => {
  return '';
})
console.log(pages);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body>
    <div class="flex flex-row w-screen h-screen gap-20">
      <aside class="flex-none">
        <ModeToggle client:load />
      </aside>
      <div class="overflow-auto px-3">
        <slot />
      </div>
    </div>
  </body>
</html>

<script is:inline>
const getThemePreference = () => {
  if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
    return localStorage.getItem('theme');
  }
  return window.matchMedia('(prefers-color-scheme: dark)').matches
    ? 'dark'
    : 'light';
};
const isDark = getThemePreference() === 'dark';
document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

if (typeof localStorage !== 'undefined') {
  const observer = new MutationObserver(() => {
    const isDark = document.documentElement.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  });
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class'],
  });
}
</script>
